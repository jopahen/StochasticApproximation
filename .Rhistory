#discounted put option payoff
f <- function(S = 100, K = 120, r = 0.05, T = 0.2){
return(exp(-r*T) * max(K-S,0))
}
#auxiliary function w for BS-formula wrt. volatility
w <- function(sigma = 0.1, S = 100, K = 120, r = 0.05, T = 0.2){
return((log(K/S) - (r-sigma^2/2) * T) / sigma / sqrt(T))
}
#pricing formula wrt. volatility
I <- function(sigma = 0.1, S = 100, K = 120, r = 0.05, T = 0.2){
return(exp(-r*T) * K * pnorm(w(sigma, S, K, r, T)) -
S * pnorm(w(sigma, S, K, r, T) - sigma * sqrt(T)))
}
I()
I(T = 90/365)
I(sigma = 0.3, T = 90/365)
library(brentj)
install.packages("brentj")
#We use the Brent root finding algorithm to calculate the implied volatility in the given setting:
library(pracma)
r <- 0.05
T <- 0.2
S <- 100
K <- 120
#We use the Brent root finding algorithm to calculate the implied volatility in the given setting:
source("BS_functions.r")
library(pracma)
r <- 0.05
T <- 0.2
S <- 100
K <- 120
sigma_IV <- brent(I, 0.0001, 2)
sigma_IV <- brent(I, 0.00001, 2)
#We use the Brent root finding algorithm to calculate the implied volatility in the given setting:
source("BS_functions.r")
library(pracma)
objective <- function(sigma) I(sigma) - 22
sigma_IV <- brent(objective, 0.0001, 2)
I(sigma_IV$root)
365/5
#We use the Brent root finding algorithm to calculate the implied volatility in the given setting:
source("BS_functions.r")
library(pracma)
objective <- function(sigma) I(sigma) - 22
sigma_IV <- brent(objective, 0.1, 2)
I(sigma_IV$root)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/BS_IV_rootfind.r', echo=TRUE)
sigma_IV
