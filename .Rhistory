#discounted put option payoff
f <- function(S = 100, K = 120, r = 0.05, T = 0.2){
return(exp(-r*T) * max(K-S,0))
}
#auxiliary function w for BS-formula wrt. volatility
w <- function(sigma = 0.1, S = 100, K = 120, r = 0.05, T = 0.2){
return((log(K/S) - (r-sigma^2/2) * T) / sigma / sqrt(T))
}
#pricing formula wrt. volatility
I <- function(sigma = 0.1, S = 100, K = 120, r = 0.05, T = 0.2){
return(exp(-r*T) * K * pnorm(w(sigma, S, K, r, T)) -
S * pnorm(w(sigma, S, K, r, T) - sigma * sqrt(T)))
}
I()
I(T = 90/365)
I(sigma = 0.3, T = 90/365)
library(brentj)
install.packages("brentj")
#We use the Brent root finding algorithm to calculate the implied volatility in the given setting:
library(pracma)
r <- 0.05
T <- 0.2
S <- 100
K <- 120
#We use the Brent root finding algorithm to calculate the implied volatility in the given setting:
source("BS_functions.r")
library(pracma)
r <- 0.05
T <- 0.2
S <- 100
K <- 120
sigma_IV <- brent(I, 0.0001, 2)
sigma_IV <- brent(I, 0.00001, 2)
#We use the Brent root finding algorithm to calculate the implied volatility in the given setting:
source("BS_functions.r")
library(pracma)
objective <- function(sigma) I(sigma) - 22
sigma_IV <- brent(objective, 0.0001, 2)
I(sigma_IV$root)
365/5
#We use the Brent root finding algorithm to calculate the implied volatility in the given setting:
source("BS_functions.r")
library(pracma)
objective <- function(sigma) I(sigma) - 22
sigma_IV <- brent(objective, 0.1, 2)
I(sigma_IV$root)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/BS_IV_rootfind.r', echo=TRUE)
sigma_IV
#price process simulation
S <- function(N, S_0 = 100, r = 0.05, sigma = 0.1, T = 0.2){
return(S_0 * exp((r - sigma^2/2)*T + sigma * sqrt(T) * rnorm(N)))
}
hist(S(100))
#We use the Brent root finding algorithm to calculate the implied volatility
#in the given setting:
source("BS_functions.r")
library(pracma) #package implementing the Brent root-finding algorithm
objective <- function(sigma) I(sigma) - 22 #define objective to find root
sigma_IV <- brent(objective, 0.1, 2)$root #run Brent, give out root
RM_IV <- function(N = 100, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV))-I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV)))
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(sigma_IV_new)
}
sigma_IV_RM <- RM_IV()
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 1000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV))-I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV)))
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(sigma_IV_new)
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV))-I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV)))
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(sigma_IV_new)
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
mean(f(S(1000)))
mean(f(S(1000, sigma = sigma_IV)))
mean(f(S = S(1000, sigma = sigma_IV)))
mean(f(S = S(1000, sigma = sigma_IV)))
mean(f(S = S(10000, sigma = sigma_IV)))
mean(f(S = S(10000, sigma = sigma_IV)))
mean(f(S = S(10000, sigma = sigma_IV)))
mean(f(S(10000, sigma = sigma_IV)))
mean(f(S(10000, sigma = sigma_IV)))
mean(f(S(10000, sigma = sigma_IV)))
mean(f(S(10000, sigma = sigma_IV)))
f(S(10000, sigma = sigma_IV))
#We implement the RM-algorithm to find the IV with regard to the put option price
source("BS_functions.r")
f(S(10000, sigma = sigma_IV))
S(10000, sigma = sigma_IV)
K-S(1000, sigma = sigma_IV)
max(K-S(1000, sigma = sigma_IV),0)
pmax(K-S(1000, sigma = sigma_IV),0)
#We implement the RM-algorithm to find the IV with regard to the put option price
source("BS_functions.r")
S_0 <- 100
K <- 120
pmax(K-S(1000, sigma = sigma_IV),0)
mean(f(S(1000, sigma = sigma_IV)))
mean(f(S(10000, sigma = sigma_IV)))
mean(f(S(100000, sigma = sigma_IV)))
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV)))
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(sigma_IV_new)
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.5, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV)))
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(sigma_IV_new)
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(sigma_IV_new)
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(list(IV = sigma_IV_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 1
err <- abs(sigma_new - sigma)
while(iter <= max_iter & err < tol){
sigma <- sigma_new
alpha <- alpha_0 / iter^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_IV_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 1
err <- abs(sigma_new - sigma)
while(iter <= max_iter & err < tol){
sigma <- sigma_new
alpha <- alpha_0 / iter^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 1
err <- abs(sigma_new - sigma)
while(iter <= max_iter){
sigma <- sigma_new
alpha <- alpha_0 / iter^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter <= max_iter){
iter <- iter + 1
sigma <- sigma_new
alpha <- alpha_0 / iter^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 100, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 10000,
tol = .Machine$double.eps){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter <= max_iter){
iter <- iter + 1
sigma <- sigma_new
alpha <- alpha_0 / iter^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 100, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 10000){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter <= max_iter){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 100, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 10000){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < max_iter){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
#We implement the RM-algorithm to find the IV with regard to the put option price
source("BS_functions.r")
RM_IV <- function(N = 100, I = 22, sigma_0 = 0.1, alpha_0 = 2/(120+100),
rho = 1, max_iter = 10000){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < max_iter){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(n = 10000, N = 100, I = 22, sigma_0 = 0.1, alpha_0 = 2/(120+100),
rho = 1){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
source("BS_IV_rootfind.r")
#We run the analysis of the RM-algorithm for calculating the BS implied vol.
#select n = 1000 iterations, N = 1, 10, 100, 1000 samples per iteration
#rho = 0.8 or 1
n <- 1000
Ns <- c(1,10,100,1000)
rho <- 0.8
Nsims <- 20
MSE <- numeric(length = length(Ns))
for(i in 1:length(Ns)){
N <- N[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
for(i in 1:length(Ns)){
N <- Ns[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
warnings()
source("BS_IV_rootfind.r")
source("RM_IV_Put.r")
#We run the analysis of the RM-algorithm for calculating the BS implied vol.
#select n = 1000 iterations, N = 1, 10, 100, 1000 samples per iteration
#rho = 0.8 or 1
n <- 1000
Ns <- c(1,10,100,1000)
rho <- 0.8
Nsims <- 20
MSE <- numeric(length = length(Ns))
for(i in 1:length(Ns)){
N <- Ns[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
plot(n*Ns, MSE)
plot(log10(n*Ns), MSE)
plot(log10(n*Ns), log10(MSE))
abline(b = -0.5)
abline(a = -2, b = -0.5)
abline(a = -1, b = -0.5)
abline(a = -1, b = -1)
abline(a = 2, b = -1)
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1)
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, color = "red", lty = "dashed")
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, col = "red", lty = "dashed")
source("BS_IV_rootfind.r")
source("RM_IV_Put.r")
#We run the analysis of the RM-algorithm for calculating the BS implied vol.
#select n = 1000 iterations, N = 1, 10, 100, 1000 samples per iteration
#rho = 0.8 or 1
n <- 1000
Ns <- c(1,10,100,1000)
rho <- 0.8
Nsims <- 20
MSE <- numeric(length = length(Ns))
for(i in 1:length(Ns)){
N <- Ns[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
abline(a = 2, b = -1, col = "red", lty = "dashed")
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, col = "red", lty = "dashed")
rho <- 1
Nsims <- 20
MSE <- numeric(length = length(Ns))
for(i in 1:length(Ns)){
N <- Ns[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, col = "red", lty = "dashed")
source("C:/Studium/WS2122/Stochastic Simulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
