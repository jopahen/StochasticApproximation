return(objective)
}
optimize(objective, interval = c(-6,1), sigma = sigma)
sigma <- 0.1
S_sim <- S_path(500, S_0 = 100, r = 0.05, sigma = sigma, T = 0.2)
objective <- function(r_IS, S = S_sim, sigma = 0.1, r = 0.05,
K = 150, T = 0.2){
objective <- numeric(length = length(r_IS))
for(i in 1:length(r_IS)){
objective[i] <- log(mean(g(S, K, r, T)^2 * lratio_vectorized(S[,-1], S[1,1], r, r_IS = r_IS[i], sigma, T)))
}
return(objective)
}
optimize(objective, interval = c(-6,1), sigma = sigma)
sigma <- 0.8
S_sim <- S_path(500, S_0 = 100, r = 0.05, sigma = sigma, T = 0.2)
objective <- function(r_IS, S = S_sim, sigma = 0.1, r = 0.05,
K = 150, T = 0.2){
objective <- numeric(length = length(r_IS))
for(i in 1:length(r_IS)){
objective[i] <- log(mean(g(S, K, r, T)^2 * lratio_vectorized(S[,-1], S[1,1], r, r_IS = r_IS[i], sigma, T)))
}
return(objective)
}
optimize(objective, interval = c(-6,1), sigma = sigma)
#finding optimal drift
source("BS_functions.r")
sigma <- 0.8
S_sim <- S_path(500, S_0 = 100, r = 0.05, sigma = sigma, T = 0.2)
objective <- function(r_IS, S = S_sim, sigma = 0.1, r = 0.05,
K = 150, T = 0.2){
objective <- numeric(length = length(r_IS))
for(i in 1:length(r_IS)){
objective[i] <- log(mean(g(S, K, r, T)^2 *
lratio_vectorized(S[,-1], S[1,1], r,
r_IS = r_IS[i], sigma, T)))
}
return(objective)
}
optimize(objective, interval = c(-6,1), sigma = sigma)
#finding optimal drift
source("BS_functions.r")
sigma <- 0.8
S_sim <- S_path(10000, S_0 = 100, r = 0.05, sigma = sigma, T = 0.2)
objective <- function(r_IS, S = S_sim, sigma = 0.1, r = 0.05,
K = 150, T = 0.2){
objective <- numeric(length = length(r_IS))
for(i in 1:length(r_IS)){
objective[i] <- log(mean(g(S, K, r, T)^2 *
lratio_vectorized(S[,-1], S[1,1], r,
r_IS = r_IS[i], sigma, T)))
}
return(objective)
}
optimize(objective, interval = c(-6,1), sigma = sigma)
S_sim <- S_path(10000, S_0 = 100, r = 0.05, sigma = sigma, T = 0.2)
objective <- function(r_IS, S = S_sim, sigma = 0.1, r = 0.05,
K = 150, T = 0.2){
objective <- numeric(length = length(r_IS))
for(i in 1:length(r_IS)){
objective[i] <- log(mean(g(S, K, r, T)^2 *
lratio_vectorized(S[,-1], S[1,1], r,
r_IS = r_IS[i], sigma, T)))
}
return(objective)
}
optimize(objective, interval = c(-6,1), sigma = sigma)
#finding optimal drift
source("BS_functions.r")
objective <- function(r_IS, S = S_sim, sigma = 0.1, r = 0.05,
K = 150, T = 0.2){
objective <- numeric(length = length(r_IS))
for(i in 1:length(r_IS)){
objective[i] <- log(mean(g(S, K, r, T)^2 *
lratio_vectorized(S[,-1], S[1,1], r,
r_IS = r_IS[i], sigma, T)))
}
return(objective)
}
sigmas <- c(0.1,5,0.1)
optimal_rs <- numeric(length = length(sigmas))
for(i in 1:length(sigmas)){
S_sim <- S_path(10000, S_0 = 100, r = 0.05, sigma = sigmas[i], T = 0.2)
optimal_rs[i] <- optimize(objective, interval = c(-6,1), sigma = sigmas[i])
}
#finding optimal drift
source("BS_functions.r")
objective <- function(r_IS, S = S_sim, sigma = 0.1, r = 0.05,
K = 150, T = 0.2){
objective <- numeric(length = length(r_IS))
for(i in 1:length(r_IS)){
objective[i] <- log(mean(g(S, K, r, T)^2 *
lratio_vectorized(S[,-1], S[1,1], r,
r_IS = r_IS[i], sigma, T)))
}
return(objective)
}
sigmas <- c(0.1,5,0.1)
optimal_rs <- numeric(length = length(sigmas))
for(i in 1:length(sigmas)){
S_sim <- S_path(10000, S_0 = 100, r = 0.05, sigma = sigmas[i], T = 0.2)
optimal_rs[i] <- optimize(objective, interval = c(-6,1), sigma = sigmas[i])$minimum
}
plot(sigmas, optimal_rs, pch = 20)
sigmas <- c(0.1,5,0.1)
sigmas <- seq(0.1,5,0.1)
optimal_rs <- numeric(length = length(sigmas))
for(i in 1:length(sigmas)){
S_sim <- S_path(10000, S_0 = 100, r = 0.05, sigma = sigmas[i], T = 0.2)
optimal_rs[i] <- optimize(objective, interval = c(-6,1), sigma = sigmas[i])$minimum
}
plot(sigmas, optimal_rs, pch = 20)
lines(sigmas, optimal_rs, col = "red")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/optimal_drift.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/optimal_drift.r", echo=TRUE)
data <- data.frame(sigmas,optimal_rs)
#finding optimal drift
library(splines)
spline_fit <- lm(optimal_rs ~ bs(sigmas), data = data)
lines(spline_fit)
plot(spline_fit)
optimal_r <- function(sigma){
return(as.numeric(predict(spline_fit, newdata = list(sigmas = sigma))))
}
optimal_r(sigmas)
x <- seq(0,5,0.01)
plot(x, optimal_r(x), type = "l")
plot(sigmas, optimal_rs, pch = 20)
x <- seq(0,5,0.01)
lines(x, optimal_r(x), type = "l")
spline_fit <- lm(optimal_rs ~ ns(sigmas), data = data)
optimal_r <- function(sigma){
return(as.numeric(predict(spline_fit, newdata = list(sigmas = sigma))))
}
x <- seq(0,5,0.01)
lines(x, optimal_r(x), type = "l")
spline_fit <- lm(optimal_rs ~ bs(sigmas), data = data)
optimal_r <- function(sigma){
return(as.numeric(predict(spline_fit, newdata = list(sigmas = sigma))))
}
x <- seq(0,5,0.01)
lines(x, optimal_r(x), type = "l")
#finding optimal drift
library(splines)
source("BS_functions.r")
objective <- function(r_IS, S = S_sim, sigma = 0.1, r = 0.05,
K = 150, T = 0.2){
objective <- numeric(length = length(r_IS))
for(i in 1:length(r_IS)){
objective[i] <- log(mean(g(S, K, r, T)^2 *
lratio_vectorized(S[,-1], S[1,1], r,
r_IS = r_IS[i], sigma, T)))
}
return(objective)
}
N <- 10000
sigmas <- seq(0.1,5,0.1)
optimal_rs <- numeric(length = length(sigmas))
for(i in 1:length(sigmas)){
S_sim <- S_path(N, S_0 = 100, r = 0.05, sigma = sigmas[i], T = 0.2)
optimal_rs[i] <- optimize(objective, interval = c(-6,1), sigma = sigmas[i])$minimum
}
plot(sigmas, optimal_rs, pch = 20)
data <- data.frame(sigmas, optimal_rs)
spline_fit <- lm(optimal_rs ~ bs(sigmas), data = data)
optimal_r <- function(sigma){
return(as.numeric(predict(spline_fit, newdata = list(sigmas = sigma))))
}
x <- seq(0,5,0.01)
lines(x, optimal_r(x), type = "l")
spline_fit <- smooth.spline(sigmas, optimal_rs, cv = TRUE)
optimal_r <- function(sigma){
return(as.numeric(predict(spline_fit, newdata = list(sigmas = sigma))))
}
x <- seq(0,5,0.01)
lines(x, optimal_r(x), type = "l")
optimal_r <- function(sigma){
return(as.numeric(predict(spline_fit, newdata = sigma)))
}
x <- seq(0,5,0.01)
lines(x, optimal_r(x), type = "l")
data <- data.frame(sigmas, optimal_rs)
spline_fit <- lm(optimal_rs ~ bs(sigmas), data = data)
optimal_r <- function(sigma){
return(as.numeric(predict(spline_fit, newdata = list(sigmas = sigma))))
}
x <- seq(0,5,0.01)
lines(x, optimal_r(x), type = "l")
spline_fit <- lm(optimal_rs ~ bs(sigmas, degree = 4), data = data)
optimal_r <- function(sigma){
return(as.numeric(predict(spline_fit, newdata = list(sigmas = sigma))))
}
x <- seq(0,5,0.01)
lines(x, optimal_r(x), type = "l")
spline_fit <- lm(optimal_rs ~ bs(sigmas, degree = 5), data = data)
optimal_r <- function(sigma){
return(as.numeric(predict(spline_fit, newdata = list(sigmas = sigma))))
}
x <- seq(0,5,0.01)
lines(x, optimal_r(x), type = "l")
plot(sigmas, optimal_rs, pch = 20)
data <- data.frame(sigmas, optimal_rs)
spline_fit <- lm(optimal_rs ~ bs(sigmas, degree = 5), data = data)
optimal_r <- function(sigma){
return(as.numeric(predict(spline_fit, newdata = list(sigmas = sigma))))
}
x <- seq(0,5,0.01)
lines(x, optimal_r(x), type = "l")
#finding optimal drift
library(splines)
source("BS_functions.r")
objective <- function(r_IS, S = S_sim, sigma = 0.1, r = 0.05,
K = 150, T = 0.2){
objective <- numeric(length = length(r_IS))
for(i in 1:length(r_IS)){
objective[i] <- log(mean(g(S, K, r, T)^2 *
lratio_vectorized(S[,-1], S[1,1], r,
r_IS = r_IS[i], sigma, T)))
}
return(objective)
}
N <- 10000
sigmas <- seq(0.1,5,0.1)
optimal_rs <- numeric(length = length(sigmas))
for(i in 1:length(sigmas)){
S_sim <- S_path(N, S_0 = 100, r = 0.05, sigma = sigmas[i], T = 0.2)
optimal_rs[i] <- optimize(objective, interval = c(-6,1), sigma = sigmas[i])$minimum
}
plot(sigmas, optimal_rs, pch = 20)
#spline interpolation of optimal drifts based on sigma
data <- data.frame(sigmas, optimal_rs)
spline_fit <- lm(optimal_rs ~ bs(sigmas, degree = 5), data = data)
optimal_r <- function(sigma){
return(as.numeric(predict(spline_fit, newdata = list(sigmas = sigma))))
}
x <- seq(0,5,0.01)
lines(x, optimal_r(x), type = "l", col = "r")
lines(x, optimal_r(x), type = "l", col = "red")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/BS_IV_rootfind.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put.r", echo=TRUE)
sigma_IV_RM <- RM_IV()
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/BS_IV_rootfind.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/optimal_drift.r", echo=TRUE)
optimal_r(0.5)
optimal_r(0.8)
source("BS_functions.r")
source("optimal_drift.r")
Put_Asian_pricer_IS <- function(N = 10^5, S_0 = 100, r = 0.05, r_IS = -0.5,
sigma = 0.8, K = 150, T = 0.2){
ISample <- S_path(N, S_0 = S_0, r = r_IS, sigma = sigma, T = T)
frac <- g(ISample, K = K, r = r, T = T) * lratio_vectorized(ISample[,-1], S_0 = S_0, r = r, r_IS = r_IS, sigma = sigma, T = T)
price <- mean(frac)
se <- sd(frac)
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se))
}
RM_IV_Asian_IS_OD <- function(n = 1000, N = 1000, I = 49.3, sigma_0 = 1, alpha_0 = 2/(150+100),
rho = 1, K = 150, batch_sd = 100, sd_monitor = FALSE){
sigma <- sigma_0
r_IS <- optimal_r(sigma)
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma, r_IS = r_IS)$price - I)
sigmas <- sigma_new
batch_sds <- c()
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
r_IS <- optimal_r(sigma)
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma, r_IS = r_IS)$price - I)
sigmas <- c(sigmas, sigma_new)
err <- abs(sigma_new - sigma)
iter <- iter + 1
if(iter > batch_sd){
batch_sds <- c(batch_sds, sd(sigmas[(iter - batch_sd):iter]))
}
if(length(batch_sds) > 1 & sd_monitor){
if(batch_sds[length(batch_sds)] > batch_sds[length(batch_sds)-1]) break
}
#print(iter)
}
return(list(sigma = sigma_new, sigmas = sigmas, batch_sds = batch_sds))
}
RM_IV_Asian_IS_OD <- function(n = 1000, N = 1000, I = 49.3, sigma_0 = 1, alpha_0 = 2/(150+100),
rho = 1, K = 150, batch_sd = 100, sd_monitor = FALSE){
sigma <- sigma_0
r_IS <- optimal_r(sigma)
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma, r_IS = r_IS)$price - I)
sigmas <- sigma_new
batch_sds <- c()
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
r_IS <- optimal_r(sigma)
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma, r_IS = r_IS)$price - I)
sigmas <- c(sigmas, sigma_new)
err <- abs(sigma_new - sigma)
iter <- iter + 1
if(iter > batch_sd){
batch_sds <- c(batch_sds, sd(sigmas[(iter - batch_sd):iter]))
}
if(length(batch_sds) > 1 & sd_monitor){
if(batch_sds[length(batch_sds)] > batch_sds[length(batch_sds)-1]) break
}
print(iter)
}
return(list(sigma = sigma_new, sigmas = sigmas, batch_sds = batch_sds))
}
RM <- RM_IV_Asian_IS_OD()
plot(RM$sigmas)
plot(RM$sigmas, type = "l")
RM_IV_Asian_IS_OD <- function(n = 1000, N = 1000, I = 49.3, sigma_0 = 1, alpha_0 = 2/(150+100),
rho = 1, K = 150, batch_sd = 100, sd_monitor = FALSE){
sigma <- sigma_0
drifts <- optimal_r(sigma)
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma, r_IS = drifts)$price - I)
sigmas <- sigma_new
batch_sds <- c()
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
r_IS <- optimal_r(sigma)
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma, r_IS = r_IS)$price - I)
sigmas <- c(sigmas, sigma_new)
drifts <- c(drifts, r_IS)
err <- abs(sigma_new - sigma)
iter <- iter + 1
if(iter > batch_sd){
batch_sds <- c(batch_sds, sd(sigmas[(iter - batch_sd):iter]))
}
if(length(batch_sds) > 1 & sd_monitor){
if(batch_sds[length(batch_sds)] > batch_sds[length(batch_sds)-1]) break
}
print(iter)
}
return(list(sigma = sigma_new, sigmas = sigmas, batch_sds = batch_sds, drifts = drifts))
}
RM <- RM_IV_Asian_IS_OD()
plot(RM$sigmas, type = "l")
plot(RM$batch_sds, type = "l")
plot(RM$drifts, type = "l")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift.R", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift_Analysis.R", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift_Analysis.R", echo=TRUE)
RM <- RM_IV_Asian_IS_OD(sd_monitor = TRUE)
plot(RM$sigmas, type = "l")
plot(RM$batch_sds, type = "l")
plot(RM$drifts, type = "l")
Put_Asian_pricer_IS(sigma = RM$sigma)
RM <- RM_IV_Asian_IS_OD(sd_monitor = FALSE)
plot(RM$sigmas, type = "l")
plot(RM$batch_sds, type = "l")
plot(RM$drifts, type = "l")
Put_Asian_pricer_IS(sigma = RM$sigma)
#We implement the RM-algorithm to find the IV with regard to the Asian
#put option price, using importance sampling
source("BS_functions.r")
Put_Asian_pricer_IS <- function(N = 10^5, S_0 = 100, r = 0.05, r_IS = -0.5,
sigma = 0.8, K = 150, T = 0.2){
ISample <- S_path(N, S_0 = S_0, r = r_IS, sigma = sigma, T = T)
frac <- g(ISample, K = K, r = r, T = T) * lratio_vectorized(ISample[,-1], S_0 = S_0, r = r, r_IS = r_IS, sigma = sigma, T = T)
#frac <- g(ISample, K = K, r = r, T = T) * p_vectorized(ISample[,-1], S_0 = S_0, r = r, sigma = sigma, T = T) / p_vectorized(ISample[,-1], S_0 = S_0, r = r_IS, sigma = sigma, T = T)
price <- mean(frac)
se <- sd(frac)
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se))
}
RM_IV_Asian_IS <- function(n = 1000, N = 1000, I = 49.3, sigma_0 = 1, alpha_0 = 2/(150+100),
rho = 1, K = 150, batch_sd = 100, sd_monitor = FALSE){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- sigma_new
batch_sds <- c()
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- c(sigmas, sigma_new)
err <- abs(sigma_new - sigma)
iter <- iter + 1
if(iter > batch_sd){
batch_sds <- c(batch_sds, sd(sigmas[(iter - batch_sd):iter]))
}
if(length(batch_sds) > 1 & sd_monitor){
if(batch_sds[length(batch_sds)] > batch_sds[length(batch_sds)-1]) break
}
#print(iter)
}
return(list(sigma = sigma_new, sigmas = sigmas, batch_sds = batch_sds))
}
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
RM <- RM_IV_Asian_IS_OD(sd_monitor = FALSE)
plot(RM$sigmas, type = "l")
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
RM <- RM_IV_Asian_IS_OD(sd_monitor = FALSE)
plot(RM$sigmas, type = "l")
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
plot(RM$batch_sds, type = "l")
lines(sigma_IV_RM_Asian_IS$batch_sds, type = "l")
plot(RM$batch_sds, type = "l")
lines(sigma_IV_RM_Asian_IS$batch_sds, type = "l", col = "red")
Put_Asian_pricer_IS <- function(N = 10^5, S_0 = 100, r = 0.05, r_IS = 0.05,
sigma = 0.8, K = 150, T = 0.2){
ISample <- S_path(N, S_0 = S_0, r = r_IS, sigma = sigma, T = T)
frac <- g(ISample, K = K, r = r, T = T) * lratio_vectorized(ISample[,-1], S_0 = S_0, r = r, r_IS = r_IS, sigma = sigma, T = T)
#frac <- g(ISample, K = K, r = r, T = T) * p_vectorized(ISample[,-1], S_0 = S_0, r = r, sigma = sigma, T = T) / p_vectorized(ISample[,-1], S_0 = S_0, r = r_IS, sigma = sigma, T = T)
price <- mean(frac)
se <- sd(frac)
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se))
}
RM_IV_Asian_IS <- function(n = 1000, N = 1000, I = 49.3, sigma_0 = 1, alpha_0 = 2/(150+100),
rho = 1, K = 150, batch_sd = 100, sd_monitor = FALSE){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- sigma_new
batch_sds <- c()
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- c(sigmas, sigma_new)
err <- abs(sigma_new - sigma)
iter <- iter + 1
if(iter > batch_sd){
batch_sds <- c(batch_sds, sd(sigmas[(iter - batch_sd):iter]))
}
if(length(batch_sds) > 1 & sd_monitor){
if(batch_sds[length(batch_sds)] > batch_sds[length(batch_sds)-1]) break
}
#print(iter)
}
return(list(sigma = sigma_new, sigmas = sigmas, batch_sds = batch_sds))
}
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
lines(sigma_IV_RM_Asian_IS$batch_sds, type = "l", col = "red")
plot(RM$batch_sds, type = "l")
lines(sigma_IV_RM_Asian_IS$batch_sds, type = "l", col = "red")
plot(RM$sigmas, type = "l")
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
Put_Asian_pricer_IS <- function(N = 10^5, S_0 = 100, r = 0.05, r_IS = -0.5,
sigma = 0.8, K = 150, T = 0.2){
ISample <- S_path(N, S_0 = S_0, r = r_IS, sigma = sigma, T = T)
frac <- g(ISample, K = K, r = r, T = T) * lratio_vectorized(ISample[,-1], S_0 = S_0, r = r, r_IS = r_IS, sigma = sigma, T = T)
#frac <- g(ISample, K = K, r = r, T = T) * p_vectorized(ISample[,-1], S_0 = S_0, r = r, sigma = sigma, T = T) / p_vectorized(ISample[,-1], S_0 = S_0, r = r_IS, sigma = sigma, T = T)
price <- mean(frac)
se <- sd(frac)
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se))
}
RM_IV_Asian_IS <- function(n = 1000, N = 1000, I = 49.3, sigma_0 = 1, alpha_0 = 2/(150+100),
rho = 1, K = 150, batch_sd = 100, sd_monitor = FALSE){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- sigma_new
batch_sds <- c()
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- c(sigmas, sigma_new)
err <- abs(sigma_new - sigma)
iter <- iter + 1
if(iter > batch_sd){
batch_sds <- c(batch_sds, sd(sigmas[(iter - batch_sd):iter]))
}
if(length(batch_sds) > 1 & sd_monitor){
if(batch_sds[length(batch_sds)] > batch_sds[length(batch_sds)-1]) break
}
#print(iter)
}
return(list(sigma = sigma_new, sigmas = sigmas, batch_sds = batch_sds))
}
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(sd_monitor = FALSE)
plot(RM$sigmas, type = "l")
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
plot(RM$batch_sds, type = "l")
lines(sigma_IV_RM_Asian_IS$batch_sds, type = "l", col = "red")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(rho = 0.8, sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
plot(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
plot(sigma_IV_RM_Asian_IS$batch_sds, type = "l", col = "red")
plot(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(rho = 1, sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "black")
