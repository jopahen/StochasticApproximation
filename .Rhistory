RM <- RM_IV_Asian_IS_OD()
plot(RM$sigmas)
plot(RM$sigmas, type = "l")
RM_IV_Asian_IS_OD <- function(n = 1000, N = 1000, I = 49.3, sigma_0 = 1, alpha_0 = 2/(150+100),
rho = 1, K = 150, batch_sd = 100, sd_monitor = FALSE){
sigma <- sigma_0
drifts <- optimal_r(sigma)
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma, r_IS = drifts)$price - I)
sigmas <- sigma_new
batch_sds <- c()
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
r_IS <- optimal_r(sigma)
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma, r_IS = r_IS)$price - I)
sigmas <- c(sigmas, sigma_new)
drifts <- c(drifts, r_IS)
err <- abs(sigma_new - sigma)
iter <- iter + 1
if(iter > batch_sd){
batch_sds <- c(batch_sds, sd(sigmas[(iter - batch_sd):iter]))
}
if(length(batch_sds) > 1 & sd_monitor){
if(batch_sds[length(batch_sds)] > batch_sds[length(batch_sds)-1]) break
}
print(iter)
}
return(list(sigma = sigma_new, sigmas = sigmas, batch_sds = batch_sds, drifts = drifts))
}
RM <- RM_IV_Asian_IS_OD()
plot(RM$sigmas, type = "l")
plot(RM$batch_sds, type = "l")
plot(RM$drifts, type = "l")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift.R", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift_Analysis.R", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift_Analysis.R", echo=TRUE)
RM <- RM_IV_Asian_IS_OD(sd_monitor = TRUE)
plot(RM$sigmas, type = "l")
plot(RM$batch_sds, type = "l")
plot(RM$drifts, type = "l")
Put_Asian_pricer_IS(sigma = RM$sigma)
RM <- RM_IV_Asian_IS_OD(sd_monitor = FALSE)
plot(RM$sigmas, type = "l")
plot(RM$batch_sds, type = "l")
plot(RM$drifts, type = "l")
Put_Asian_pricer_IS(sigma = RM$sigma)
#We implement the RM-algorithm to find the IV with regard to the Asian
#put option price, using importance sampling
source("BS_functions.r")
Put_Asian_pricer_IS <- function(N = 10^5, S_0 = 100, r = 0.05, r_IS = -0.5,
sigma = 0.8, K = 150, T = 0.2){
ISample <- S_path(N, S_0 = S_0, r = r_IS, sigma = sigma, T = T)
frac <- g(ISample, K = K, r = r, T = T) * lratio_vectorized(ISample[,-1], S_0 = S_0, r = r, r_IS = r_IS, sigma = sigma, T = T)
#frac <- g(ISample, K = K, r = r, T = T) * p_vectorized(ISample[,-1], S_0 = S_0, r = r, sigma = sigma, T = T) / p_vectorized(ISample[,-1], S_0 = S_0, r = r_IS, sigma = sigma, T = T)
price <- mean(frac)
se <- sd(frac)
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se))
}
RM_IV_Asian_IS <- function(n = 1000, N = 1000, I = 49.3, sigma_0 = 1, alpha_0 = 2/(150+100),
rho = 1, K = 150, batch_sd = 100, sd_monitor = FALSE){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- sigma_new
batch_sds <- c()
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- c(sigmas, sigma_new)
err <- abs(sigma_new - sigma)
iter <- iter + 1
if(iter > batch_sd){
batch_sds <- c(batch_sds, sd(sigmas[(iter - batch_sd):iter]))
}
if(length(batch_sds) > 1 & sd_monitor){
if(batch_sds[length(batch_sds)] > batch_sds[length(batch_sds)-1]) break
}
#print(iter)
}
return(list(sigma = sigma_new, sigmas = sigmas, batch_sds = batch_sds))
}
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
RM <- RM_IV_Asian_IS_OD(sd_monitor = FALSE)
plot(RM$sigmas, type = "l")
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
RM <- RM_IV_Asian_IS_OD(sd_monitor = FALSE)
plot(RM$sigmas, type = "l")
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
plot(RM$batch_sds, type = "l")
lines(sigma_IV_RM_Asian_IS$batch_sds, type = "l")
plot(RM$batch_sds, type = "l")
lines(sigma_IV_RM_Asian_IS$batch_sds, type = "l", col = "red")
Put_Asian_pricer_IS <- function(N = 10^5, S_0 = 100, r = 0.05, r_IS = 0.05,
sigma = 0.8, K = 150, T = 0.2){
ISample <- S_path(N, S_0 = S_0, r = r_IS, sigma = sigma, T = T)
frac <- g(ISample, K = K, r = r, T = T) * lratio_vectorized(ISample[,-1], S_0 = S_0, r = r, r_IS = r_IS, sigma = sigma, T = T)
#frac <- g(ISample, K = K, r = r, T = T) * p_vectorized(ISample[,-1], S_0 = S_0, r = r, sigma = sigma, T = T) / p_vectorized(ISample[,-1], S_0 = S_0, r = r_IS, sigma = sigma, T = T)
price <- mean(frac)
se <- sd(frac)
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se))
}
RM_IV_Asian_IS <- function(n = 1000, N = 1000, I = 49.3, sigma_0 = 1, alpha_0 = 2/(150+100),
rho = 1, K = 150, batch_sd = 100, sd_monitor = FALSE){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- sigma_new
batch_sds <- c()
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- c(sigmas, sigma_new)
err <- abs(sigma_new - sigma)
iter <- iter + 1
if(iter > batch_sd){
batch_sds <- c(batch_sds, sd(sigmas[(iter - batch_sd):iter]))
}
if(length(batch_sds) > 1 & sd_monitor){
if(batch_sds[length(batch_sds)] > batch_sds[length(batch_sds)-1]) break
}
#print(iter)
}
return(list(sigma = sigma_new, sigmas = sigmas, batch_sds = batch_sds))
}
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
lines(sigma_IV_RM_Asian_IS$batch_sds, type = "l", col = "red")
plot(RM$batch_sds, type = "l")
lines(sigma_IV_RM_Asian_IS$batch_sds, type = "l", col = "red")
plot(RM$sigmas, type = "l")
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
Put_Asian_pricer_IS <- function(N = 10^5, S_0 = 100, r = 0.05, r_IS = -0.5,
sigma = 0.8, K = 150, T = 0.2){
ISample <- S_path(N, S_0 = S_0, r = r_IS, sigma = sigma, T = T)
frac <- g(ISample, K = K, r = r, T = T) * lratio_vectorized(ISample[,-1], S_0 = S_0, r = r, r_IS = r_IS, sigma = sigma, T = T)
#frac <- g(ISample, K = K, r = r, T = T) * p_vectorized(ISample[,-1], S_0 = S_0, r = r, sigma = sigma, T = T) / p_vectorized(ISample[,-1], S_0 = S_0, r = r_IS, sigma = sigma, T = T)
price <- mean(frac)
se <- sd(frac)
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se))
}
RM_IV_Asian_IS <- function(n = 1000, N = 1000, I = 49.3, sigma_0 = 1, alpha_0 = 2/(150+100),
rho = 1, K = 150, batch_sd = 100, sd_monitor = FALSE){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- sigma_new
batch_sds <- c()
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (Put_Asian_pricer_IS(N, K = K, sigma = sigma)$price - I)
sigmas <- c(sigmas, sigma_new)
err <- abs(sigma_new - sigma)
iter <- iter + 1
if(iter > batch_sd){
batch_sds <- c(batch_sds, sd(sigmas[(iter - batch_sd):iter]))
}
if(length(batch_sds) > 1 & sd_monitor){
if(batch_sds[length(batch_sds)] > batch_sds[length(batch_sds)-1]) break
}
#print(iter)
}
return(list(sigma = sigma_new, sigmas = sigmas, batch_sds = batch_sds))
}
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(sd_monitor = FALSE)
plot(RM$sigmas, type = "l")
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
plot(RM$batch_sds, type = "l")
lines(sigma_IV_RM_Asian_IS$batch_sds, type = "l", col = "red")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(rho = 0.8, sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
plot(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
plot(sigma_IV_RM_Asian_IS$batch_sds, type = "l", col = "red")
plot(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "red")
sigma_IV_RM_Asian_IS <- RM_IV_Asian_IS(rho = 1, sd_monitor = FALSE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", col = "black")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
#x <- toc()
plot(sigma_IV_RM_Asian$sigmas, type = "l", main = "Evolution of RM-iterations",
ylab = "sigma", xlab = "Iterations", col = "blue")
plot(seq(71,1000),sigma_IV_RM_Asian$batch_sds, type = "l", main = "Evolution
of batch-standard errors (batch size 70)", xlab = "Iterations",
ylab = "batch std. err.", col = "red")
Put_Asian_pricer(sigma = sigma_IV_RM_Asian$sigma)
#x <- toc()
plot(sigma_IV_RM_Asian$sigmas, type = "l", main = "Evolution of RM-iterations",
ylab = "sigma", xlab = "Iterations", col = "blue")
plot(seq(71,1000),sigma_IV_RM_Asian$batch_sds, type = "l", main = "Evolution
of batch-standard errors (batch size = 70)", xlab = "Iterations",
ylab = "batch std. err.", col = "red")
#x <- toc()
plot(sigma_IV_RM_Asian$sigmas, type = "l", main = "Evolution of RM-iterations",
ylab = "sigma", xlab = "Iterations", col = "blue")
plot(seq(71,1000),sigma_IV_RM_Asian$batch_sds, type = "l",
main = "Evolution of batch-standard errors (batch size = 70)",
xlab = "Iterations",
ylab = "batch std. err.", col = "red")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
plot(seq(71,100),sigma_IV_RM_Asian$batch_sds, type = "l",
main = "Evolution of batch-standard errors (batch size = 70)",
xlab = "Iterations",
ylab = "batch std. err.", col = "red")
Put_Asian_pricer(sigma = sigma_IV_RM_Asian$sigma)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS.r", echo=TRUE)
plot(sigma_IV_RM_Asian_IS$sigmas, type = "l")
plot(sigma_IV_RM_Asian_IS$batch_sds, type = "l")
sigma_IV_RM_Asian_IS$batch_sds
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS.r", echo=TRUE)
Put_Asian_pricer_IS(sigma = sigma_IV_RM_Asian_IS$sigma)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
plot(seq(51,200),sigma_IV_RM_Asian$batch_sds, type = "l",
main = "Evolution of batch-standard errors (batch size = 70)",
xlab = "Iterations",
ylab = "batch std. err.", col = "red")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS.r", echo=TRUE)
lines(sigma_IV_RM_Asian$sigmas, type = "l", main = "Evolution of RM-iterations",
ylab = "sigma", xlab = "Iterations", col = "blue")
plot(sigma_IV_RM_Asian$sigmas, type = "l", main = "Evolution of RM-iterations",
ylab = "sigma", xlab = "Iterations", col = "blue")
plot(seq(51,200),sigma_IV_RM_Asian$batch_sds, type = "l",
main = "Evolution of batch-standard errors (batch size = 50)",
xlab = "Iterations",
ylab = "batch std. err.", col = "red")
plot(sigma_IV_RM_Asian_IS$sigmas, type = "l", main = "Evolution of RM-iterations",
ylab = "sigma", xlab = "Iterations", col = "blue")
plot(sigma_IV_RM_Asian_IS$batch_sds, type = "l",
main = "Evolution of batch-standard errors (batch size = 50)",
xlab = "Iterations",
ylab = "batch std. err.", col = "red")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift.R", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift.R", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/IS_pricing.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/optimal_drift.r", echo=TRUE)
plot(x, optimal_r(x), type = "l", col = "red")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/optimal_drift.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift.R", echo=TRUE)
Put_Asian_pricer_IS(sigma = sigma_IV_RM_Asian$sigma)
Put_Asian_pricer_IS <- function(N = 10^6, S_0 = 100, r = 0.05, r_IS = -0.5,
sigma = 0.8, K = 150, T = 0.2){
ISample <- S_path(N, S_0 = S_0, r = r_IS, sigma = sigma, T = T)
frac <- g(ISample, K = K, r = r, T = T) * lratio_vectorized(ISample[,-1], S_0 = S_0, r = r, r_IS = r_IS, sigma = sigma, T = T)
#frac <- g(ISample, K = K, r = r, T = T) * p_vectorized(ISample[,-1], S_0 = S_0, r = r, sigma = sigma, T = T) / p_vectorized(ISample[,-1], S_0 = S_0, r = r_IS, sigma = sigma, T = T)
price <- mean(frac)
se <- sd(frac)
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se))
}
Put_Asian_pricer_IS(sigma = sigma_IV_RM_Asian$sigma)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian.r', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian_IS.r', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift.R', echo=TRUE)
lines(sigma_IV_RM_Asian$batch_sds, type = "l",
main = "Evolution of batch-standard errors (batch size = 50)",
xlab = "Iterations - batch size",
ylab = "batch std. err.", col = "red")
lines(sigma_IV_RM_Asian_IS$batch_sds, type = "l",
main = "Evolution of batch-standard errors (batch size = 50)",
xlab = "Iterations - batch size",
ylab = "batch std. err.", col = "red")
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian.r', echo=TRUE)
Put_Asian_pricer(sigma = sigma_IV_RM_Asian$sigma)
Put_Asian_pricer(sigma = sigma_IV_RM_Asian$sigma, K = 150)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian.r', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian_IS.r', echo=TRUE)
sigma_IV_RM_Asian_IS$batch_sds
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift.R', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian.r', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian_IS.r', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift.R', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian.r', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian.r', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian.r', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian_IS.r', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift.R', echo=TRUE)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/optimal_drift.r', echo=TRUE)
Put_Asian_pricer_IS(N=10^6)
Put_Asian_pricer_IS(N=10^6)
Put_Asian_pricer_IS(N=10^6)
Put_Asian_pricer_IS(N=10^6)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS_optimal_drift.R", echo=TRUE)
lines(sigma_IV_RM_Asian_IS$sigmas, type = "l", main = "Evolution of RM-iterations",
ylab = "sigma", xlab = "Iterations", col = "blue")
plot(sigma_IV_RM_Asian_IS$sigmas, type = "l", main = "Evolution of RM-iterations",
ylab = "sigma", xlab = "Iterations", col = "blue")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_IS.r", echo=TRUE)
Put_Asian_pricer_IS(N = 10^6, sigma = sigma_IV_RM_Asian_IS$sigma)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/IS_pricing.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/IS_pricing.r", echo=TRUE)
test1 <- Put_Asian_pricer(K = 120, sigma = 0.8)
test1 <- Put_Asian_pricer(K = 150, sigma = 0.8)
#variance reduction in terms of sigma
sigmas <- seq(0.1,5,0.2)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/optimal_drift.r", echo=TRUE)
#variance reduction in terms of sigma
sigmas <- seq(0.1,5,0.2)
sd_ratios <- numeric(length = length(sigmas))
for(i in 1:length(sigmas)){
sd_ratios[i] <- Put_Asian_pricer_IS(r_IS = optimal_r(sigmas[i]),
K = 150, sigma = sigmas[i])$se /
Put_Asian_pricer(r_IS = optimal_r(sigmas[i]), K = 150, sigma = sigmas[i])$se
}
#variance reduction in terms of sigma
sigmas <- seq(0.1,5,0.2)
sd_ratios <- numeric(length = length(sigmas))
for(i in 1:length(sigmas)){
sd_ratios[i] <- Put_Asian_pricer_IS(r_IS = optimal_r(sigmas[i]),
K = 150, sigma = sigmas[i])$se /
Put_Asian_pricer(K = 150, sigma = sigmas[i])$se
print(i)
}
plot(sigmas, sd_ratios)
plot(sigmas, sd_ratios, ylim = c(0,1))
optimal_r(0.1)
#variance reduction in terms of sigma
sigmas <- seq(0.2,5,0.2)
sd_ratios <- numeric(length = length(sigmas))
for(i in 1:length(sigmas)){
sd_ratios[i] <- Put_Asian_pricer_IS(r_IS = optimal_r(sigmas[i]),
K = 150, sigma = sigmas[i])$se /
Put_Asian_pricer(K = 150, sigma = sigmas[i])$se
print(i)
}
plot(sigmas, sd_ratios, ylim = c(0,1), pch = 20)
plot(sigmas, sd_ratios, xlim = c(0,1), ylim = c(0,1), pch = 20)
plot(sigmas, sd_ratios, xlim = c(0,5), ylim = c(0,1), pch = 20)
plot(sigmas, sd_ratios, xlim = c(0,5), ylim = c(0,1), pch = 20,
xlab = "sigma", ylab = "std. err. ratio",
main = "Variance Reduction using importance sampling with optimal drift")
plot(sigmas, sd_ratios, xlim = c(0,5), ylim = c(0,1), pch = 20,
xlab = "sigma", ylab = "std. err. ratio",
main = "Variance reduction using importance
sampling with optimal drift")
plot(sigmas, sd_ratios, xlim = c(0,5), ylim = c(0,1), pch = 20,
xlab = "sigma", ylab = "std. err. ratio",
main = "Variance reduction using importance
sampling with optimal drift")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put.r", echo=TRUE)
sigma_IV_RM <- RM_IV()
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put.r", echo=TRUE)
sigma_IV_RM <- RM_IV()
plot(sigma_IV_RM$sigmas)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put.r", echo=TRUE)
sigma_IV_RM$sigma
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
#plot simulation results
par(pty="s")
plot(log10(n*Ns), log10(MSE), pch = 20, main = "MSE decay for RM-estimates of
implied volatility, rho = 0.8", xlab = "lg(N * n)", ylab = "lg(MSE)",
asp = 1) #plot MSEs on log-scales
abline(a = 2, b = -1, col = "red", lty = "dashed") #O(1/N) for comparison
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
plot(sigma_IV_RM_Asian$sigmas, type = "l", main = "Evolution of RM-iterations",
ylab = "sigma", xlab = "Iterations", col = "blue")
plot(sigma_IV_RM_Asian$batch_sds, type = "l",
main = "Evolution of batch standard errors
(batch size = 100)",
xlab = "Iterations - batch size",
ylab = "batch std. err.", col = "red")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
#give out results
sigma_IV_RM_Asian$sigma
#check accuracy with high-iteration MC-pricer
Put_Asian_pricer(sigma = sigma_IV_RM_Asian$sigma, K = 120, N = 10^6)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
#check accuracy with high-iteration MC-pricer
Put_Asian_pricer(sigma = sigma_IV_RM_Asian$sigma, K = 120)
#give out results
sigma_IV_RM_Asian$sigma
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
S_test <- S_path(10000, r = 0.05, sigma = 0.8)
S_test1 <- S_test[,-1]
#lratio_vectorized(S_test1, r_IS = -1)
#g(S_test)
#mean(S_path(100000)[,51])
#100*exp(0.05*0.2)
plot(density(rowMeans(S_test1)))
S_test <- S_path(100000, r = 0.05, sigma = 0.8)
S_test1 <- S_test[,-1]
#lratio_vectorized(S_test1, r_IS = -1)
#g(S_test)
#mean(S_path(100000)[,51])
#100*exp(0.05*0.2)
plot(density(rowMeans(S_test1)))
#lratio_vectorized(S_test1, r_IS = -1)
#g(S_test)
#mean(S_path(100000)[,51])
#100*exp(0.05*0.2)
plot(density(rowMeans(S_test1)), main = "Density approximation of discrete
monitoring average (S_0 = 100, r = 0.05, sigma = 0.8)")
#lratio_vectorized(S_test1, r_IS = -1)
#g(S_test)
#mean(S_path(100000)[,51])
#100*exp(0.05*0.2)
plot(density(rowMeans(S_test1)), main = "Density approximation of discrete monitoring average
(S_0 = 100, r = 0.05, sigma = 0.8)")
#lratio_vectorized(S_test1, r_IS = -1)
#g(S_test)
#mean(S_path(100000)[,51])
#100*exp(0.05*0.2)
plot(density(rowMeans(S_test1)), main = "Density approximation
(S_0 = 100, r = 0.05, sigma = 0.8)")
#lratio_vectorized(S_test1, r_IS = -1)
#g(S_test)
#mean(S_path(100000)[,51])
#100*exp(0.05*0.2)
plot(density(rowMeans(S_test1)), main = "Density approximation
(S_0 = 100, r = 0.05, sigma = 0.8)")
#lratio_vectorized(S_test1, r_IS = -1)
#g(S_test)
#mean(S_path(100000)[,51])
#100*exp(0.05*0.2)
plot(density(rowMeans(S_test1)), main = "Density approximation
(S_0 = 100, r = 0.05, sigma = 0.8)", xlab = "discrete monitoring average")
S_test <- S_path(100000, r = -0.5, sigma = 0.8)
S_test1 <- S_test[,-1]
#lratio_vectorized(S_test1, r_IS = -1)
#g(S_test)
#mean(S_path(100000)[,51])
#100*exp(0.05*0.2)
plot(density(rowMeans(S_test1)), main = "Density approximation
(S_0 = 100, r = 0.05, sigma = 0.8)", xlab = "discrete monitoring average")
S_test <- S_path(100000, r = 0.05, sigma = 0.8)
S_test1 <- S_test[,-1]
#lratio_vectorized(S_test1, r_IS = -1)
#g(S_test)
#mean(S_path(100000)[,51])
#100*exp(0.05*0.2)
plot(density(rowMeans(S_test1)), main = "Density approximation
(S_0 = 100, r = 0.05, sigma = 0.8)", xlab = "discrete monitoring average")
S_test <- S_path(100000, r = 0.05, sigma = 1)
S_test1 <- S_test[,-1]
#lratio_vectorized(S_test1, r_IS = -1)
#g(S_test)
#mean(S_path(100000)[,51])
#100*exp(0.05*0.2)
plot(density(rowMeans(S_test1)), main = "Density approximation
(S_0 = 100, r = 0.05, sigma = 0.8)", xlab = "discrete monitoring average")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/IS_pricing.r", echo=TRUE)
plot(rs,ses, type = "l", main = "Effect of IS drift shift", xlab = "IS-drift",
ylab = "IS std. err.", col = "red")
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/IS_pricing.r", echo=TRUE)
