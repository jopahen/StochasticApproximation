abline(b = -0.5)
abline(a = -2, b = -0.5)
abline(a = -1, b = -0.5)
abline(a = -1, b = -1)
abline(a = 2, b = -1)
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1)
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, color = "red", lty = "dashed")
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, col = "red", lty = "dashed")
source("BS_IV_rootfind.r")
source("RM_IV_Put.r")
#We run the analysis of the RM-algorithm for calculating the BS implied vol.
#select n = 1000 iterations, N = 1, 10, 100, 1000 samples per iteration
#rho = 0.8 or 1
n <- 1000
Ns <- c(1,10,100,1000)
rho <- 0.8
Nsims <- 20
MSE <- numeric(length = length(Ns))
for(i in 1:length(Ns)){
N <- Ns[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
abline(a = 2, b = -1, col = "red", lty = "dashed")
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, col = "red", lty = "dashed")
rho <- 1
Nsims <- 20
MSE <- numeric(length = length(Ns))
for(i in 1:length(Ns)){
N <- Ns[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, col = "red", lty = "dashed")
source("C:/Studium/WS2122/Stochastic Simulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
Put_Asian_pricer(sigma = sigma_IV_RM_Asian$sigma)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
#Analysis of sd-monitored early stopping RM for BS-IV of Asian put option
source("RM_IV_Put_Asian.r")
Nsims <- 20
batch_sizes <- c(20, 50 , 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = b[i], sd_monitor = TRUE)
price_err <- c(sigmas, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", b[i],"done.", sep = " "))
}
for(i in length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(sigmas, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
Nsims <- 20
batch_sizes <- c(20, 50 , 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in 1:length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(price_err, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
Nsims <- 5
batch_sizes <- c(20, 50 , 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in 1:length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(price_err, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
#Analysis of sd-monitored early stopping RM for BS-IV of Asian put option
source("RM_IV_Put_Asian.r")
Nsims <- 5
batch_sizes <- c(20, 50 , 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in 1:length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(price_err, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
plot(batch_sizes, MSEs)
barplot(batch_sizes, MSEs)
plot(batch_sizes, MSEs)
plot(batch_sizes, MSEs, type = "l")
points(batch_sizes, MSEs)
points(batch_sizes, MSEs, pch = 20)
plot(batch_sizes, MSEs, type = "l")
points(batch_sizes, MSEs, pch = 20)
#Analysis of sd-monitored early stopping RM for BS-IV of Asian put option
source("RM_IV_Put_Asian.r")
Nsims <- 5
batch_sizes <- c(20, 30, 50, 70, 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in 1:length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(price_err, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
plot(batch_sizes, MSEs, type = "l")
points(batch_sizes, MSEs, pch = 20)
Nsims <- 10
batch_sizes <- c(20, 30, 50, 70, 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in 1:length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(price_err, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
plot(batch_sizes, MSEs, type = "l")
points(batch_sizes, MSEs, pch = 20)
tic()
sigma_IV_RM_Asian <- RM_IV_Asian(sd_monitor = TRUE)
x <- toc()
#We implement the RM-algorithm to find the IV with regard to the Asian
#put option price
library(tictoc)
tic()
sigma_IV_RM_Asian <- RM_IV_Asian(sd_monitor = TRUE)
x <- toc()
x$msg
x$toc
x$toc - x$tic
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_Analysis.R", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_Analysis.R", echo=TRUE)
plot(batch_sizes, log(MSEs), type = "l")
points(batch_sizes, MSEs, pch = 20)
plot(batch_sizes, log(MSEs), type = "l")
points(batch_sizes, log(MSEs), pch = 20)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian_Analysis.R', echo=TRUE)
Pricing <- Put_Asian_pricer()
#we implement a high-iteration MC-pricer to validate accuracy
Put_Asian_pricer <- function(N = 10^5, S_0 = 100, r = 0.05, sigma = 0.713,
K = 120, T = 0.2){
price <- mean(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T)))
se <- sd(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T)))
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower, CI_upper = price_CI_upper))
}
Pricing <- Put_Asian_pricer()
#we implement a high-iteration MC-pricer to validate accuracy
Put_Asian_pricer <- function(N = 10^5, S_0 = 100, r = 0.05, sigma = 0.713,
K = 120, T = 0.2){
price <- mean(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T)))
se <- sd(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T)))
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower, CI_upper = price_CI_upper, se = se))
}
Pricing <- Put_Asian_pricer()
#we implement a high-iteration MC-pricer to validate accuracy
Put_Asian_pricer <- function(N = 10^5, S_0 = 100, r = 0.05, sigma = 0.713,
K = 120, T = 0.2){
price <- mean(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T)))
se <- sd(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T)))
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se/sqrt(N)))
}
Pricing <- Put_Asian_pricer()
Pricing <- Put_Asian_pricer(K = 150)
#we implement a high-iteration MC-pricer to validate accuracy
Put_Asian_pricer <- function(N = 10^5, S_0 = 100, r = 0.05, sigma = 0.713,
K = 120, T = 0.2){
price <- mean(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T)))
se <- sd(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T), K = K, r = r, T = T))
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se/sqrt(N)))
}
Pricing <- Put_Asian_pricer()
Pricing <- Put_Asian_pricer(K = 150)
#we implement a high-iteration MC-pricer to validate accuracy
Put_Asian_pricer <- function(N = 10^5, S_0 = 100, r = 0.05, sigma = 0.713,
K = 120, T = 0.2){
price <- mean(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T)))
se <- sd(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T), K = K, r = r, T = T))
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se/sqrt(N)))
}
Pricing <- Put_Asian_pricer(K = 120)
Pricing <- Put_Asian_pricer(K = 150)
#we implement a high-iteration MC-pricer to validate accuracy
Put_Asian_pricer <- function(N = 10^5, S_0 = 100, r = 0.05, sigma = 0.713,
K = 120, T = 0.2){
price <- mean(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T), K = K, r = r, T = T))
se <- sd(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T), K = K, r = r, T = T))
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se/sqrt(N)))
}
#we implement a high-iteration MC-pricer to validate accuracy
Put_Asian_pricer <- function(N = 10^5, S_0 = 100, r = 0.05, sigma = 0.713,
K = 120, T = 0.2){
price <- mean(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T), K = K, r = r, T = T))
se <- sd(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T), K = K, r = r, T = T))
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se/sqrt(N)))
}
Pricing <- Put_Asian_pricer(K = 120)
Pricing <- Put_Asian_pricer(K = 150)
Pricing <- Put_Asian_pricer(K = 80)
Pricing <- Put_Asian_pricer(K = 120)
Pricing <- Put_Asian_pricer(K = 120, sigma = 0.1)
Pricing <- Put_Asian_pricer(K = 150, sigma = 0.1)
Pricing <- Put_Asian_pricer(N = 1000, K = 150, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 120, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 150, sigma = 0.713)
100 * exp(0.05*0.2)
Pricing <- Put_Asian_pricer(N = 1000, K = 90, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 150, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 85, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 120, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 100, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 120, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 150, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 170, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 150, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 120, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 100, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 90, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 50, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 70, sigma = 0.713)
Pricing <- Put_Asian_pricer(N = 1000, K = 150, sigma = 0.713)
S_path(100)
S <- S_path(1)
S <- S_path(1)[-1]
S <- S_path(1)[-1]
S <- S_path(1)[-1]
S <- S_path(1)[-1]
S <- S_path(1)[-1]
S <- S_path(1)[-1]
p(S)
#price process pdf (single path vector)
p <- function(x, S_0 = 100, r = 0.05, sigma = 0.1, T = 0.2){
m <- length(x)
dt <- T/m
S <- c(S_0, x)
factors <- c()
for(i in 1:length(x)){
d <- (log(S[i+1]/S[i]) - (r - sigma^2/2) * dt) / (sigma * sqrt(dt))
factor <- dnorm(d) / (S[i+1] * sigma * sqrt(dt))
factors <- c(factos, factor)
}
return(prod(factors))
}
S <- S_path(1)[-1]
p(S)
#price process pdf (single path vector)
p <- function(x, S_0 = 100, r = 0.05, sigma = 0.1, T = 0.2){
m <- length(x)
dt <- T/m
S <- c(S_0, x)
factors <- c()
for(i in 1:length(x)){
d <- (log(S[i+1]/S[i]) - (r - sigma^2/2) * dt) / (sigma * sqrt(dt))
factor <- dnorm(d) / (S[i+1] * sigma * sqrt(dt))
factors <- c(factors, factor)
}
return(prod(factors))
}
S <- S_path(1)[-1]
p(S)
p(S)
S <- S_path(1)[-1]
p(S)
S <- S_path(1)[-1]
p(S)
#price process pdf (vectorized)
p_vectorized <- function(X, S_0 = 100, r = 0.05, sigma = 0.1, T = 0.2){
return(apply(X, 1, p, S_0 = S_0, r = 0.05, sigma = 0.1, T = 0.2))
}
S <- S_path(10)[-1]
S <- S_path(10)[,-1]
S
p(S)
p_vectorized(S)
S <- S_path(1000)[,-1]
p_vectorized(S)
S <- S_path(1000, m=1)[,-1]
p_vectorized(S)
#price process pdf (vectorized)
p_vectorized <- function(X, S_0 = 100, r = 0.05, sigma = 0.1, T = 0.2){
if(is.null(dim(X))) return(lapply(X, p, S_0 = S_0, r = 0.05, sigma = 0.1, T = 0.2))
return(apply(X, 1, p, S_0 = S_0, r = 0.05, sigma = 0.1, T = 0.2))
}
S <- S_path(1000, m=1)[,-1]
p_vectorized(S)
#price process pdf (vectorized)
p_vectorized <- function(X, S_0 = 100, r = 0.05, sigma = 0.1, T = 0.2){
if(is.null(dim(X))) return(as.vector(lapply(X, p, S_0 = S_0, r = 0.05,
sigma = 0.1, T = 0.2)))
return(apply(X, 1, p, S_0 = S_0, r = 0.05, sigma = 0.1, T = 0.2))
}
S <- S_path(1000, m=1)[,-1]
p_vectorized(S)
S <- S_path(10, m=1)[,-1]
p_vectorized(S)
#price process pdf (vectorized)
p_vectorized <- function(X, S_0 = 100, r = 0.05, sigma = 0.1, T = 0.2){
if(is.null(dim(X))) return(as.numeric(lapply(X, p, S_0 = S_0, r = 0.05,
sigma = 0.1, T = 0.2)))
return(apply(X, 1, p, S_0 = S_0, r = 0.05, sigma = 0.1, T = 0.2))
}
S <- S_path(10, m=1)[,-1]
p_vectorized(S)
S <- S_path(10, m=2)[,-1]
p_vectorized(S)
S <- seq(50,150,0.1)
S <- seq(50,150,0.1)
plot(S,p_vectorized(S), type = "l")
S <- seq(50,150,0.1)
plot(S,p_vectorized(S, T = 1), type = "l")
100 * exp(1)
plot(S,p_vectorized(S, r = 0.5), type = "l")
100*exp(0.5*0.2)
#price process pdf (vectorized)
p_vectorized <- function(X, S_0 = 100, r = 0.05, sigma = 0.1, T = 0.2){
if(is.null(dim(X))) return(as.numeric(lapply(X, p, S_0 = S_0, r = r,
sigma = sigma, T = T)))
return(apply(X, 1, p, S_0 = S_0, r = r, sigma = sigma, T = T))
}
S <- seq(50,150,0.1)
plot(S,p_vectorized(S, r = 0.5), type = "l")
plot(S,p_vectorized(S, r = 0.5, sigma = 0.7), type = "l")
plot(S,p_vectorized(S, r = 0.5, sigma = 0.3), type = "l")
S <- seq(0,200,0.1)
plot(S,p_vectorized(S, r = 0.5, sigma = 0.3), type = "l")
plot(S,p_vectorized(S, r = 0.05, sigma = 0.2), type = "l")
plot(S,p_vectorized(S, r = 0.05, sigma = 0.7), type = "l")
plot(S,p_vectorized(S, r = 0.05, sigma = 0.6), type = "l")
plot(S,p_vectorized(S, r = 0.05, sigma = 0.5), type = "l")
#price process simulation (maturity)
S <- function(N, S_0 = 100, r = 0.05, sigma = 0.1, T = 0.2){
return(S_0 * exp((r - sigma^2/2)*T + sigma * sqrt(T) * rnorm(N)))
}
#discounted put option payoff
f <- function(S = 100, K = 120, r = 0.05, T = 0.2){
return(exp(-r*T) * pmax(K-S,0))
}
#price process simulation (path)
S_path <- function(N, m = 50, S_0 = 100, r = 0.05, sigma = 0.1,
T = 0.2){
dt <- T / m
t <- seq(0,T,dt)
X <- matrix(rnorm((m+1)*N, 0, sqrt(dt)), nrow = N)
X[,1] <- numeric(length = N)
X <- t(apply(X,1,cumsum))
S <- S_0 * exp((r-sigma/2) * t + sigma * X)
return(S)
}
#discounted put option payoff (asian)
g <- function(S_path, K = 120, r = 0.05, T = 0.2){
S <- S_path[,-1]
if(is.null(dim(S))) return(exp(-r*T) * pmax(K - mean(S),0))
return(as.vector(exp(-r*T) * pmax(K - rowMeans(S),0)))
}
#auxiliary function w for BS-formula wrt. volatility
w <- function(sigma = 0.1, S = 100, K = 120, r = 0.05, T = 0.2){
return((log(K/S) - (r-sigma^2/2) * T) / sigma / sqrt(T))
}
#pricing formula
Put <- function(sigma = 0.1, S = 100, K = 120, r = 0.05, T = 0.2){
return(exp(-r*T) * K * pnorm(w(sigma, S, K, r, T)) -
S * pnorm(w(sigma, S, K, r, T) - sigma * sqrt(T)))
}
#pricing formula wrt. sigma
I <- function(sigma) Put(sigma)
#price process pdf (single path vector)
p <- function(x, S_0 = 100, r = 0.05, sigma = 0.1, T = 0.2){
m <- length(x)
dt <- T/m
S <- c(S_0, x)
factors <- c()
for(i in 1:length(x)){
d <- (log(S[i+1]/S[i]) - (r - sigma^2/2) * dt) / (sigma * sqrt(dt))
factor <- dnorm(d) / (S[i+1] * sigma * sqrt(dt))
factors <- c(factors, factor)
}
return(prod(factors))
}
#price process pdf (vectorized)
p_vectorized <- function(X, S_0 = 100, r = 0.05, sigma = 0.1, T = 0.2){
if(is.null(dim(X))) return(as.numeric(lapply(X, p, S_0 = S_0, r = r,
sigma = sigma, T = T)))
return(apply(X, 1, p, S_0 = S_0, r = r, sigma = sigma, T = T))
}
S_test <- seq(0,200,0.1)
plot(S_test,p_vectorized(S_test, r = 0.05, sigma = 0.5), type = "l")
plot(density(S(10000, sigma = 0.5)))
plot(density(S(100000, sigma = 0.5)))
max(density(S(100000, sigma = 0.5)))
S_test <- S_path(10000)[,-1]
p_vectorized(S_test)
S_test <- S_path(100000)[,-1]
p_vectorized(S_test)
#experiments regarding importance sampling for the MC-pricer
source("BS_functions.r")
Put_Asian_pricer <- function(N = 10^4, S_0 = 100, r = 0.05, sigma = 0.713,
K = 120, T = 0.2){
price <- mean(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T), K = K, r = r, T = T))
se <- sd(g(S_path(N, S_0 = S_0, r = r, sigma = sigma, T = T), K = K, r = r, T = T))
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se/sqrt(N)))
}
Put_Asian_pricer_IS <- function(N = 10^4, S_0 = 100, r = 0.05, r_IS = 0.1,
sigma = 0.713, K = 120, T = 0.2){
ISample <- S_path(N, S_0 = S_0, r = r_IS, sigma = sigma, T = T)
frac <- g(ISample, K = K, r = r, T = T) * p_vectorized(ISample, S_0 = S_0, r = r, sigma = sigma, T = T) / p_vectorized(ISample, S_0 = S_0, r = r_IS, sigma = sigma, T = T)
price <- mean(frac)
se <- sd(frac)
price_CI_lower <- price - qnorm(0.975) * se / sqrt(N)
price_CI_upper <- price + qnorm(0.975) * se / sqrt(N)
return(list(price = price, CI_lower = price_CI_lower,
CI_upper = price_CI_upper, se = se/sqrt(N)))
}
test1 <- Put_Asian_pricer()
test2 <- Put_Asian_pricer_IS()
test2 <- Put_Asian_pricer_IS(r_IS = 0.01)
test2 <- Put_Asian_pricer_IS(r_IS = 0)
test2 <- Put_Asian_pricer_IS(r_IS = -0.1)
test1 <- Put_Asian_pricer()
rs <- seq(-1,1,0.1)
ses <- numeric(length = length(rs))
for(i in 1:length(rs)){
ses[i] <- Put_Asian_pricer_IS(r_IS = r)
}
rs <- seq(-1,1,0.1)
ses <- numeric(length = length(rs))
for(i in 1:length(rs)){
ses[i] <- Put_Asian_pricer_IS(r_IS = rs[i])
}
warnings()
rs <- seq(-1,1,0.1)
ses <- numeric(length = length(rs))
for(i in 1:length(rs)){
ses[i] <- Put_Asian_pricer_IS(r_IS = rs[i])$se
}
plot(rs,ses, type = "l")
rs <- seq(-1.5,1.5,0.1)
ses <- numeric(length = length(rs))
for(i in 1:length(rs)){
ses[i] <- Put_Asian_pricer_IS(r_IS = rs[i])$se
}
plot(rs,ses, type = "l")
rs <- seq(-2,1,0.1)
ses <- numeric(length = length(rs))
for(i in 1:length(rs)){
ses[i] <- Put_Asian_pricer_IS(r_IS = rs[i])$se
}
plot(rs,ses, type = "l")
rs <- seq(-1.5,1,0.1)
ses <- numeric(length = length(rs))
for(i in 1:length(rs)){
ses[i] <- Put_Asian_pricer_IS(r_IS = rs[i])$se
}
plot(rs,ses, type = "l")
