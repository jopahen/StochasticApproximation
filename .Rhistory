alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV)))
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(sigma_IV_new)
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV))-I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV)))
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(sigma_IV_new)
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
mean(f(S(1000)))
mean(f(S(1000, sigma = sigma_IV)))
mean(f(S = S(1000, sigma = sigma_IV)))
mean(f(S = S(1000, sigma = sigma_IV)))
mean(f(S = S(10000, sigma = sigma_IV)))
mean(f(S = S(10000, sigma = sigma_IV)))
mean(f(S = S(10000, sigma = sigma_IV)))
mean(f(S(10000, sigma = sigma_IV)))
mean(f(S(10000, sigma = sigma_IV)))
mean(f(S(10000, sigma = sigma_IV)))
mean(f(S(10000, sigma = sigma_IV)))
f(S(10000, sigma = sigma_IV))
#We implement the RM-algorithm to find the IV with regard to the put option price
source("BS_functions.r")
f(S(10000, sigma = sigma_IV))
S(10000, sigma = sigma_IV)
K-S(1000, sigma = sigma_IV)
max(K-S(1000, sigma = sigma_IV),0)
pmax(K-S(1000, sigma = sigma_IV),0)
#We implement the RM-algorithm to find the IV with regard to the put option price
source("BS_functions.r")
S_0 <- 100
K <- 120
pmax(K-S(1000, sigma = sigma_IV),0)
mean(f(S(1000, sigma = sigma_IV)))
mean(f(S(10000, sigma = sigma_IV)))
mean(f(S(100000, sigma = sigma_IV)))
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV)))
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(sigma_IV_new)
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.5, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * mean(f(S(N, sigma = sigma_IV)))
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(sigma_IV_new)
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(sigma_IV_new)
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma_IV <- sigma_0
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
iter <- 0
err <- abs(sigma_IV_new - sigma_IV)
while(iter <= max_iter & err < tol){
sigma_IV <- sigma_IV_new
alpha <- alpha_0 / iter^rho
sigma_IV_new <- sigma_IV - alpha_0 * (mean(f(S(N, sigma = sigma_IV))) - I)
err <- abs(sigma_IV_new - sigma_IV)
iter <- iter + 1
}
return(list(IV = sigma_IV_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 1
err <- abs(sigma_new - sigma)
while(iter <= max_iter & err < tol){
sigma <- sigma_new
alpha <- alpha_0 / iter^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_IV_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 1
err <- abs(sigma_new - sigma)
while(iter <= max_iter & err < tol){
sigma <- sigma_new
alpha <- alpha_0 / iter^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 1
err <- abs(sigma_new - sigma)
while(iter <= max_iter){
sigma <- sigma_new
alpha <- alpha_0 / iter^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 10000, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 1000,
tol = .Machine$double.eps){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter <= max_iter){
iter <- iter + 1
sigma <- sigma_new
alpha <- alpha_0 / iter^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 100, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 10000,
tol = .Machine$double.eps){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter <= max_iter){
iter <- iter + 1
sigma <- sigma_new
alpha <- alpha_0 / iter^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 100, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 10000){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter <= max_iter){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(N = 100, I = 22, sigma_0 = 0.1, alpha_0, rho = 1, max_iter = 10000){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < max_iter){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
S_0 <- 100
K <- 120
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
#We implement the RM-algorithm to find the IV with regard to the put option price
source("BS_functions.r")
RM_IV <- function(N = 100, I = 22, sigma_0 = 0.1, alpha_0 = 2/(120+100),
rho = 1, max_iter = 10000){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < max_iter){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
RM_IV <- function(n = 10000, N = 100, I = 22, sigma_0 = 0.1, alpha_0 = 2/(120+100),
rho = 1){
sigma <- sigma_0
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
iter <- 0
err <- abs(sigma_new - sigma)
while(iter < n){
sigma <- sigma_new
alpha <- alpha_0 / (iter+1)^rho
sigma_new <- sigma - alpha_0 * (mean(f(S(N, sigma = sigma))) - I)
err <- abs(sigma_new - sigma)
iter <- iter + 1
}
return(list(IV = sigma_new, iter = iter))
}
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
sigma_IV_RM <- RM_IV(alpha_0 = 2/(K+S_0))
source("BS_IV_rootfind.r")
#We run the analysis of the RM-algorithm for calculating the BS implied vol.
#select n = 1000 iterations, N = 1, 10, 100, 1000 samples per iteration
#rho = 0.8 or 1
n <- 1000
Ns <- c(1,10,100,1000)
rho <- 0.8
Nsims <- 20
MSE <- numeric(length = length(Ns))
for(i in 1:length(Ns)){
N <- N[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
for(i in 1:length(Ns)){
N <- Ns[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
warnings()
source("BS_IV_rootfind.r")
source("RM_IV_Put.r")
#We run the analysis of the RM-algorithm for calculating the BS implied vol.
#select n = 1000 iterations, N = 1, 10, 100, 1000 samples per iteration
#rho = 0.8 or 1
n <- 1000
Ns <- c(1,10,100,1000)
rho <- 0.8
Nsims <- 20
MSE <- numeric(length = length(Ns))
for(i in 1:length(Ns)){
N <- Ns[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
plot(n*Ns, MSE)
plot(log10(n*Ns), MSE)
plot(log10(n*Ns), log10(MSE))
abline(b = -0.5)
abline(a = -2, b = -0.5)
abline(a = -1, b = -0.5)
abline(a = -1, b = -1)
abline(a = 2, b = -1)
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1)
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, color = "red", lty = "dashed")
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, col = "red", lty = "dashed")
source("BS_IV_rootfind.r")
source("RM_IV_Put.r")
#We run the analysis of the RM-algorithm for calculating the BS implied vol.
#select n = 1000 iterations, N = 1, 10, 100, 1000 samples per iteration
#rho = 0.8 or 1
n <- 1000
Ns <- c(1,10,100,1000)
rho <- 0.8
Nsims <- 20
MSE <- numeric(length = length(Ns))
for(i in 1:length(Ns)){
N <- Ns[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
abline(a = 2, b = -1, col = "red", lty = "dashed")
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, col = "red", lty = "dashed")
rho <- 1
Nsims <- 20
MSE <- numeric(length = length(Ns))
for(i in 1:length(Ns)){
N <- Ns[i]
sims <- numeric(length = Nsims)
for(j in 1:Nsims){
sims[j] <- RM_IV(n,N)
}
MSE[i] <- mean((sims - sigma_IV)^2)
print(MSE[i])
}
plot(log10(n*Ns), log10(MSE))
abline(a = 2, b = -1, col = "red", lty = "dashed")
source("C:/Studium/WS2122/Stochastic Simulation/StochasticApproximation/RM_IV_Put_Analysis.r", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
Put_Asian_pricer(sigma = sigma_IV_RM_Asian$sigma)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian.r", echo=TRUE)
#Analysis of sd-monitored early stopping RM for BS-IV of Asian put option
source("RM_IV_Put_Asian.r")
Nsims <- 20
batch_sizes <- c(20, 50 , 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = b[i], sd_monitor = TRUE)
price_err <- c(sigmas, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", b[i],"done.", sep = " "))
}
for(i in length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(sigmas, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
Nsims <- 20
batch_sizes <- c(20, 50 , 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in 1:length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(price_err, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
Nsims <- 5
batch_sizes <- c(20, 50 , 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in 1:length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(price_err, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
#Analysis of sd-monitored early stopping RM for BS-IV of Asian put option
source("RM_IV_Put_Asian.r")
Nsims <- 5
batch_sizes <- c(20, 50 , 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in 1:length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(price_err, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
plot(batch_sizes, MSEs)
barplot(batch_sizes, MSEs)
plot(batch_sizes, MSEs)
plot(batch_sizes, MSEs, type = "l")
points(batch_sizes, MSEs)
points(batch_sizes, MSEs, pch = 20)
plot(batch_sizes, MSEs, type = "l")
points(batch_sizes, MSEs, pch = 20)
#Analysis of sd-monitored early stopping RM for BS-IV of Asian put option
source("RM_IV_Put_Asian.r")
Nsims <- 5
batch_sizes <- c(20, 30, 50, 70, 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in 1:length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(price_err, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
plot(batch_sizes, MSEs, type = "l")
points(batch_sizes, MSEs, pch = 20)
Nsims <- 10
batch_sizes <- c(20, 30, 50, 70, 100, 250, 500, 1000)
MSEs <- numeric(length = length(batch_sizes))
I <- 22
for(i in 1:length(batch_sizes)){
price_err <- c()
for(nsim in 1:Nsims){
RM <- RM_IV_Asian(batch_sd = batch_sizes[i], sd_monitor = TRUE)
price_err <- c(price_err, Put_Asian_pricer(sigma = RM$sigma))
}
MSEs[i] <- mean((I-price_err)^2)
print(paste("batch size", batch_sizes[i],"done.", sep = " "))
}
plot(batch_sizes, MSEs, type = "l")
points(batch_sizes, MSEs, pch = 20)
tic()
sigma_IV_RM_Asian <- RM_IV_Asian(sd_monitor = TRUE)
x <- toc()
#We implement the RM-algorithm to find the IV with regard to the Asian
#put option price
library(tictoc)
tic()
sigma_IV_RM_Asian <- RM_IV_Asian(sd_monitor = TRUE)
x <- toc()
x$msg
x$toc
x$toc - x$tic
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_Analysis.R", echo=TRUE)
source("D:/Studium/11_WS2122/StochasticSimulation/StochasticApproximation/RM_IV_Put_Asian_Analysis.R", echo=TRUE)
plot(batch_sizes, log(MSEs), type = "l")
points(batch_sizes, MSEs, pch = 20)
plot(batch_sizes, log(MSEs), type = "l")
points(batch_sizes, log(MSEs), pch = 20)
source('E:/Studium/09_WS2122/StochSim/StochasticApproximation/RM_IV_Put_Asian_Analysis.R', echo=TRUE)
